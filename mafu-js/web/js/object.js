/**
 * Created by liuqq on 2015/5/11.
 */
/**************************************************************************
 * javascript 对象
 * 1. 对象常见用法：创建、设置、查找、删除、检测和每句它的属性
 * 2. 对象中不能存在两个同名的属性
 * 3. 对象属性的几个特性：
 *    可写：表明是否可以设置该属性的值
 *    可枚举：表示是否可以通过for/in循环返回该属性
 *    可配置：表示是否可以删除、修改该属性
 *    通过代码给对象创建的所有属性都是可写、可枚举、可配置的
 * 4. 对象特性：
 *    对象的原型(prototype)指向另外一个对象，本对象的属性继承自它的原型对象
 *    对象的类(class)是一个标识对象类型的字符串
 *    对象的扩展标记(extensible flag)指明了是否可以向该对象添加新属性
 *
 * 5. 对象分为 内置对象(ECMAScript 规范定义的对象或类)、
 *           宿主对象(也可叫做内置对象)
 *           自定义对象
 *  自有属性：直接在对象中定义的属性
 *  继承属性：在对象的原型对象中定义的属性
 * 6. 创建对象的几种方式：
 *    1).对象直接量
 *    2).关键字new
 *    3).Object.create()
 * 7.原型：每一个JavaScript对象(null除外)都和另一个对象相关联，“另一个”对象就是我们熟知的原型
 *        每一个对象都从原型继承属性
 *        通过对象直接量创建的对象都具有同一个原型对象：Object.prototype
 *        通过new创建的对象的原型是构造函数的prototype属性的值
 **************************************************************************/
(function () {
    var log = function (object) {
        //console.log('##'+title+'##------------->');
        console.log(object);
    };

    /****************************************************************
     * 对象直接量创建对象
     ****************************************************************/
    var empty = {};//没有任何属性的对象
    var point = {x: 0, y: 0};//两个属性
    var point2 = {x: point.x, y: point.y + 1};//复杂对象
    //属性名字里有空格、连字符、保留字等必须用字符串表示
    var book = {
        'main title': 'JavaScript',//空格
        'sub-title': 'This is javascript',//连字符
        'for': '2'
    };

    /****************************************************************
     * 通过new创建对象,new 关键字后紧跟一个构造函数constructor
     ****************************************************************/
    var o = new Object();//创建一个空对象，和o={}一样
    var a = new Array();//创建一个空数组，和a=[]一样
    /****************************************************************
     * 原型
     ****************************************************************/
    //log(Object.prototype);
    //log(Array.prototype);
    //log(Date.prototype);
    /****************************************************************
     * Object.create() 创建对象，第一个参数是这个对象的原型，第二个参数可选，用以对对象属性进一步描述
     ****************************************************************/
    var objecdA = Object.create(Object.prototype);
    //log(objecdA);

    /****************************************************************
     * 继承
     ****************************************************************/
    /**
     * 返回一个继承自原型对象p的属性的新对象
     * @param p
     */
    function inherit(p) {
        if (p == null)throw TypeError();
        if (Object.create)
            return Object.create(p);
        var t = typeof p;
        if (t !== 'object' && t !== 'function') throw TypeError();

        function f() {
        }

        f.prototype = p;
        return new f();
    }

    var o1 = {x: 1};

    var o2 = inherit(o1);
    o2.y = 2;

    var o3 = inherit(o2);
    o3.x = 4;
    o3.z = 3;
    log(o3);
    log(o1);


})();
